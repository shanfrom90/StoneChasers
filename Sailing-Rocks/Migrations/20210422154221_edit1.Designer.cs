// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sailing_Rocks;

namespace Sailing_Rocks.Migrations
{
    [DbContext(typeof(SailingRocksContext))]
    [Migration("20210422154221_edit1")]
    partial class edit1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sailing_Rocks.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LocatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RockId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "10/10 Would pick up again.",
                            Lat = "41.363528",
                            Lng = "-81.851403",
                            LocatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 307, DateTimeKind.Local).AddTicks(2761),
                            LocationImage = "https://photos.google.com/share/AF1QipMhD_8LIwkZJi6zkrublKRvVAfR6pP_QzzISOJYEd5qQanOsON2k9dJG1wZE7MKwQ/photo/AF1QipPR6G51JPiOSqyPFzoNebXCkKurIbJdLcrrSZGZ?key=MXJhTHFJdXgyUDM4ZXZ1YWlCcVBDaEVoTC0wLThR",
                            LocationName = "Coe Lake",
                            RockId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Love on the earth!",
                            Lat = "41.435258",
                            Lng = "81.845719",
                            LocatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 307, DateTimeKind.Local).AddTicks(5090),
                            LocationImage = "https://photos.google.com/share/AF1QipMhD_8LIwkZJi6zkrublKRvVAfR6pP_QzzISOJYEd5qQanOsON2k9dJG1wZE7MKwQ/photo/AF1QipNokLXM5SutasZZ7cCEGVrSmikvBT57hwKrIwKO?key=MXJhTHFJdXgyUDM4ZXZ1YWlCcVBDaEVoTC0wLThR",
                            LocationName = "Rocky River Reservation",
                            RockId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "This made my day!",
                            Lat = "41.486700",
                            Lng = "-81.902125",
                            LocatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 307, DateTimeKind.Local).AddTicks(5138),
                            LocationImage = "https://photos.google.com/share/AF1QipMhD_8LIwkZJi6zkrublKRvVAfR6pP_QzzISOJYEd5qQanOsON2k9dJG1wZE7MKwQ/photo/AF1QipPxFGu4C5ysbdjGZHHcX-hkE225bt1IuHSrh2F8?key=MXJhTHFJdXgyUDM4ZXZ1YWlCcVBDaEVoTC0wLThR",
                            LocationName = "Lake Erie",
                            RockId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "I love this rock so much!",
                            Lat = "41.29424235787053",
                            Lng = "-82.15200988091138",
                            LocatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 307, DateTimeKind.Local).AddTicks(5144),
                            LocationImage = "https://lh3.googleusercontent.com/pw/ACtC-3cSZgugu_nTsn7kUufw-G_IVKSFqePIMPbDHiA7n5XlatblZTQhLaZH0y0CVtTXtcMP69i564m_UZFcTyOH16HeUPTOR_u_cWBH3Ta-MI4c5NFmaDzRmH2w1rXNizvehZgSNgkG6-ZfkVCsNuDV3ws=w470-h626-no?authuser=0",
                            LocationName = "Carlisle Reservation",
                            RockId = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Love for everyone!",
                            Lat = "41.3639780269892",
                            Lng = "-81.85258535965691",
                            LocatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 307, DateTimeKind.Local).AddTicks(5150),
                            LocationImage = "https://lh3.googleusercontent.com/pw/ACtC-3dT4hvboHaq__uup5U6KvGq-vLMJXuilNM__lLUxFKh_X3uxGGj_i0oggaxRy5ahPekWJ1xYsZUf0t1laVPtjaVt1DpINz1Hy_ZN5UJBfm_jHJrWXRUHaoJFonmy9LdnLRAW8RCmTyCaSSaEFstfDg=w470-h626-no?authuser=0",
                            LocationName = "Coe Lake",
                            RockId = 4
                        });
                });

            modelBuilder.Entity("Sailing_Rocks.Models.Rock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 306, DateTimeKind.Local).AddTicks(6782),
                            Description = "Some folks don't believe in this rock, but I do.",
                            Image = "https://lh3.googleusercontent.com/pw/ACtC-3cNYh8lnJbZ-hcw9MxMrem_I3IZvFSCjylLUGKFgLk0rkPRWb9kI0rZGTNCppqzqO07AxRTlQYMlo7DDuCc2ddOioH-nY3Duj88aVYqnfz4XJs3I6kY6_uBFAEhlsIAKMPRg5LaA2mJBJUPIZBm_xk=w470-h626-no?authuser=0",
                            Name = "Rock Ness",
                            Serial = "BCDF2346",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 306, DateTimeKind.Local).AddTicks(9442),
                            Description = "Love always wins!",
                            Image = "https://lh3.googleusercontent.com/pw/ACtC-3ek5FZPxYzihecIhMnfaY9hviSskhDJu7bMVUSBmoD2M7wy6EWutdNzmiOBzsxYrhHEDQ_R3-ydbQOGB5WRYZU_9wNnzVIqYmqjf1KvVHKVDlZY5wWFJw7qgETjkkqEdp4a4uOdzVyLz89-abhejTc=w470-h626-no?authuser=0",
                            Name = "Love",
                            Serial = "BCDH2346",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 306, DateTimeKind.Local).AddTicks(9503),
                            Description = "Make a Wish",
                            Image = "https://lh3.googleusercontent.com/pw/ACtC-3ft7a2r_EJqEd2LvYmbRRYQmq4uFXDdGKZ9akut1XTqk7u_RWRaFD0c4CU-c1qQEI-3_eGD3ftiwIQHJqllRX8vBIZSdj8I-vr7RVOVNAHVsNeTqG7Qn1g6diCJ8MGO0cKpUvAyqkMtnwRXu_aVAG8=w470-h626-no?authuser=0",
                            Name = "Dandelion",
                            Serial = "BCDG2346",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 306, DateTimeKind.Local).AddTicks(9510),
                            Description = "Make a Wish",
                            Image = "https://lh3.googleusercontent.com/pw/ACtC-3fCsuURb-SEfSvRvxctcRMhJvuFkZj2ENeNCcNKldagp9WcOz-v9lmfzz3D7SDsR7hMNS7-cnOES8OSSZINyaIkSeBZ5NfIxWcPh0-83YnaqGCWJLNg8qRvPTIKBqRUN3k35ena3xYfd1KLcCHqtEg=w470-h626-no?authuser=0",
                            Name = "Heart You",
                            Serial = "BCDP2346",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Sailing_Rocks.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hometown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Software Developer",
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 299, DateTimeKind.Local).AddTicks(5877),
                            Email = "jak719@gmail.com",
                            FirstName = "Jason",
                            Hometown = "Parma, OH",
                            Image = "https://jak719.github.io/images/HS5.png",
                            LastName = "Kepic",
                            Password = "password",
                            UserName = "jak719"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Software Developer",
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 304, DateTimeKind.Local).AddTicks(4978),
                            Email = "efaler@gmail.com",
                            FirstName = "Eric",
                            Hometown = "Fairview Park, OH",
                            Image = "https://emfaler.github.io/images/WCCI%20Headshot.jpg",
                            LastName = "Faler",
                            Password = "123456",
                            UserName = "efaler"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Avid Hiker",
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 304, DateTimeKind.Local).AddTicks(5038),
                            Email = "shanfrom90@gmail.com",
                            FirstName = "Shannon",
                            Hometown = "Cincinnati, OH",
                            Image = "https://avatars.githubusercontent.com/u/77690999?v=4",
                            LastName = "Adams",
                            Password = "123456",
                            UserName = "shanfrom90"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Fitness Fiend",
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 304, DateTimeKind.Local).AddTicks(5046),
                            Email = "tiahC@gmail.com",
                            FirstName = "Tiah",
                            Hometown = "Cleveland, OH",
                            Image = "https://media-exp1.licdn.com/dms/image/C4E03AQEIQiWhliy2Uw/profile-displayphoto-shrink_200_200/0/1614008492988?e=1624492800&v=beta&t=fravB8yvb_-EhFKcCa9e8KRIhPM870Zj2oFxVC7f_oc",
                            LastName = "Campbell",
                            Password = "123456",
                            UserName = "tiahRocks"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Artist",
                            CreatedOn = new DateTime(2021, 4, 22, 11, 42, 20, 304, DateTimeKind.Local).AddTicks(5053),
                            Email = "JE@gmail.com",
                            FirstName = "JE",
                            Hometown = "Cincinnati, OH",
                            Image = "https://media-exp1.licdn.com/dms/image/C4D03AQEw1N-X8JU9UA/profile-displayphoto-shrink_800_800/0/1614220067971?e=1624492800&v=beta&t=ZE3FWkoIKxRSyILQMOHsTh9omgK954adSnB9zgT2iac",
                            LastName = "Woods",
                            Password = "123456",
                            UserName = "jeXex"
                        });
                });

            modelBuilder.Entity("Sailing_Rocks.Models.UserRock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RockId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RockId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRock");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RockId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Sailing_Rocks.Models.Location", b =>
                {
                    b.HasOne("Sailing_Rocks.Models.Rock", "rock")
                        .WithMany("Locations")
                        .HasForeignKey("RockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sailing_Rocks.Models.Rock", b =>
                {
                    b.HasOne("Sailing_Rocks.Models.User", "User")
                        .WithMany("Rocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sailing_Rocks.Models.UserRock", b =>
                {
                    b.HasOne("Sailing_Rocks.Models.Rock", "Rock")
                        .WithMany("UserRocks")
                        .HasForeignKey("RockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sailing_Rocks.Models.User", "User")
                        .WithMany("UserRocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
